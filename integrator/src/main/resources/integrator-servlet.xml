<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-2.5.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
       Turn on AspectJ @Configurable support. As a result, any time you
       instantiate an object, Spring will attempt to perform dependency
       injection on that object. This occurs for instantiation via the "new"
       keyword, as well as via reflection. This is possible because AspectJ
       is used to "weave" Roo-based applications at compile time. In effect
       this feature allows dependency injection of any object at all in your
       system, which is a very useful feature (without @Configurable you'd
       only be able to dependency inject objects acquired from Spring or
       subsequently presented to a specific Spring dependency injection
       method). Roo applications use this useful feature in a number of
       areas, such as @PersistenceContext injection into entities.
   -->
    <!--<context:spring-configured/>-->
    <context:component-scan base-package="com.icl.integrator.controllers"/>

    <!--Jackson configuration-->
    <bean id="jacksonMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="objectMapper" ref="objectMapper"/>
    </bean>
    <bean class="com.icl.integrator.util.patch.PatchedAnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="jacksonMessageConverter"/>
            </list>
        </property>
    </bean>

    <bean id="cnManager"
          class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="defaultContentType" value="application/json"/>
    </bean>

    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="contentNegotiationManager" ref="cnManager"/>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                <property name="prefixJson" value="false"/>
                </bean>
            </list>
        </property>
    </bean>

    <amq:broker useJmx="false" persistent="false">
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:0"/>
        </amq:transportConnectors>
    </amq:broker>

    <amq:connectionFactory id="amqConnectionFactory"
                           brokerURL="tcp://localhost:61616"/>
    <!-- CachingConnectionFactory Definition, sessionCacheSize property is the number of sessions to cache -->
    <bean id="connectionFactory"
          class="org.springframework.jms.connection.CachingConnectionFactory">
        <constructor-arg ref="amqConnectionFactory"/>
        <property name="exceptionListener" ref="jmsExceptionListener"/>
        <property name="sessionCacheSize" value="100"/>
    </bean>
    <!-- JmsTemplate Definition -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--<constructor-arg ref="connectionFactory"/>-->
    </bean>
    <!-- listener container definition using the jms namespace, concurrency is the max number of concurrent listeners that can be started -->

    <!--TODO включить-->
    <!--<jms:listener-container concurrency="10">-->
        <!--<jms:listener id="IntegratorQueueListener"-->
                      <!--destination="IntegratorQueue"-->
                      <!--ref="integratorJmsController"/>-->
    <!--</jms:listener-container>-->
</beans>